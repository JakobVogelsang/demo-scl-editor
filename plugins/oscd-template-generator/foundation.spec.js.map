{"version":3,"file":"foundation.spec.js","sourceRoot":"","sources":["../foundation.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport {\n  getSelectionByPath,\n  processEnums,\n  serializeAndFormat,\n} from './foundation.js';\n\ndescribe('foundation.js', () => {\n  describe('getSelectionByPath', () => {\n    it('should navigate to nested selection object', () => {\n      const selection = {\n        dataObject1: {\n          child1: { grandchild: {} },\n        },\n      };\n\n      const result = getSelectionByPath(selection, ['dataObject1', 'child1']);\n      expect(result).to.deep.equal({ grandchild: {} });\n    });\n\n    it('should return empty object for non-existent path', () => {\n      const result = getSelectionByPath({}, ['nonExistent']);\n      expect(result).to.deep.equal({});\n    });\n  });\n\n  describe('processEnums', () => {\n    it('should return mandatory enumerated nodes', () => {\n      const selection = {};\n      const node = {\n        children: {\n          mandatoryEnum: {\n            typeKind: 'ENUMERATED',\n            mandatory: true,\n            children: {\n              option1: { name: 'option1' },\n            },\n          },\n          optionalEnum: {\n            typeKind: 'ENUMERATED',\n            mandatory: false,\n          },\n        },\n      };\n\n      const result = processEnums(selection, node);\n\n      expect(result).to.have.property('mandatoryEnum');\n      expect(result).to.not.have.property('optionalEnum');\n    });\n\n    it('should preserve existing selections and add enum values', () => {\n      const selection = {\n        myEnum: { userSelected: {} },\n      };\n      const node = {\n        children: {\n          myEnum: {\n            typeKind: 'ENUMERATED',\n            children: {\n              option1: { name: 'option1' },\n            },\n          },\n        },\n      };\n\n      const result = processEnums(selection, node);\n\n      expect(result.myEnum).to.have.property('userSelected');\n      expect(result.myEnum).to.have.property('option1');\n    });\n\n    it('should process nested structures recursively', () => {\n      const selection = { parent: { child: {} } };\n      const node = {\n        children: {\n          parent: {\n            children: {\n              child: {\n                children: {\n                  deepEnum: {\n                    typeKind: 'ENUMERATED',\n                    mandatory: true,\n                  },\n                },\n              },\n            },\n          },\n        },\n      };\n\n      const result = processEnums(selection, node);\n\n      expect(result.parent.child).to.have.property('deepEnum');\n    });\n  });\n\n  describe('serializeAndFormat', () => {\n    const doc = new DOMParser().parseFromString(\n      `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <SCL xmlns=\"http://www.iec.ch/61850/2003/SCL\" version=\"2007\" revision=\"B\" release=\"5\">\n        <Header id=\"LNodeTypePreview\"/>\n        <DataTypeTemplates>\n          <LNodeType lnClass=\"LPHD\" id=\"LPHD$oscd$_f79cbe3f4e9088ea\"/>\n        </DataTypeTemplates>\n      </SCL>`,\n      'application/xml'\n    );\n\n    it('should serialize and format an XML document', () => {\n      const result = serializeAndFormat(doc);\n      expect(result).to.match(/^<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>/);\n      expect(result).to.match(/<SCL[\\s\\S]*>/);\n      expect(result).to.match(/^\\t<Header id=\"LNodeTypePreview\"\\/>/m);\n      expect(result).to.match(/^\\t<DataTypeTemplates>/m);\n      expect(result).to.match(\n        /^\\t\\t<LNodeType lnClass=\"LPHD\" id=\"LPHD\\$oscd\\$_f79cbe3f4e9088ea\"\\/>/m\n      );\n      expect(result).to.match(/^\\t<\\/DataTypeTemplates>/m);\n      expect(result).to.match(/^<\\/SCL>$/m);\n    });\n  });\n});\n"]}